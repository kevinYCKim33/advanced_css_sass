/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

/* universal selector */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  /* manually add in borders and padding this way */

}

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.7;
  /* line-height double space triple space 1.5 space ms word */
  color: #777;
  padding: 30px;
}

.header {
  height: 95vh;
  /* 95 percent of viewport height at all time */
  background-image: linear-gradient(
    to right bottom,
    rgb(126, 213, 111, 0.8),
    rgb(40, 180, 131, 0.8)
    ),
  url(../img/hero.jpg);
  background-size: cover;
  /* Scales the image as large as possible without stretching the image. If the proportions of the image differ from the element, it is cropped either vertically or horizontally so that no empty space remains. */
  background-position: top;
  /* what stays the same as the window gets resized; top;bottom;center; */
  clip-path: polygon(0 0, 100% 0, 100% 75%, 0 100%);
    /* the trapezoid effect clockwise from top left */
    /* https://bennettfeely.com/clippy/ */
  position: relative;
  /* not quite sure why this is relative */
  /* since logo box is absolutely positioned relative to the header... */
  /* https://www.w3schools.com/css/tryit.asp?filename=trycss_position_absolute */
}

.logo-box {
  position: absolute;
  /* the position is relative to the parent element */
  /* in this case the header class */
  /* so set its parent class to be in relative position*/
  top: 40px;
  left: 40px;

}

.logo {
  height: 35px;
}

/* to center the heading */
.text-box {
  position: absolute;
  /* again, absolute to the parent, and make sure parent is positioned relatively */
  top: 40%;
    /* 40 percent of parent element */
    /* 40% since the bottom is cropped */
  left: 50%;
    /* 50 percent of parent element */
  transform: translate(-50%, -50%);
    /* translates half of its width to the left, and to the right; */
    /* moves origin of the translation point to the center of the content as opposed to the top left corner */
  text-align: center;
    /* the button which is a link is just a span element... */
      /* span elements are technically text, */
      /* so to center the button, we just set the text-align to center */
      /* epiphany: h1 is totally not a span element, so we had to do top left percentages */
}

.heading-primary {
  color: #fff;
  text-transform: uppercase;

  backface-visibility: hidden;
  /* at end of animation, it jitters up to the top ever so slightly */
  /* this is the fix for that... */
  margin-bottom: 60px;
}

/* block-level elements: occupy entire width, they create line breaks before and after */
/* span is inline by default, so we have to explicitly state that they will be displayed as blocks */
/* to break up the title and the sub heading as two lines */

.heading-primary-main {
  display: block;
  font-size: 60px;
  font-weight: 400;
  letter-spacing: 35px;

  animation-name: moveInLeft;
  animation-duration: 1s;
  animation-timing-function: ease-out;
  /* animation-delay: 3s; */
  /* animation-iteration-count: 3; */
}

.heading-primary-sub {
  display: block;
  font-size: 20px;
  font-weight: 700;
  /* Lato loaded 100,300,400,700,900 via google fonts */
  letter-spacing: 17.4px;
  animation: moveInRight 1s ease-out;
  /* shorthand of the trio above */
}

@keyframes moveInLeft {
  /* start point */
  0% {
    opacity: 0;
    transform: translateX(-100px);
  }

  80% {
    transform: translateX(10px);
  }

  100% {
    opacity: 1;
    transform: translate(0);
    /* it looks exactly the way it did; */
  }
}

@keyframes moveInRight {
  /* start point */
  0% {
    opacity: 0;
    transform: translateX(100px);
  }

  80% {
    transform: translateX(-10px);
  }

  100% {
    opacity: 1;
    transform: translate(0);
    /* it looks exactly the way it did; */
  }
}

/* the link pseudoclass */
.btn:link,
.btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  padding: 15px 40px;
  display: inline-block;
  /* https://www.w3schools.com/css/css_inline-block.asp */
    /* inline-blocks respect padding specifications as opposed to inline*/
  border-radius: 100px;
  transition: all .2s;
    /* good for color change too */
  position: relative;
    /* for the .btn:after point of reference */
}

.btn:hover {
  transform: translateY(-3px);
  /* down is up in css */
  /* this has button kick up */
  box-shadow: 0 10px 20px rgba(0, 0, 0, .2);
    /* x, y, blur, color */
    /* a subtle black shadow */
}

.btn:active {
  transform: translateY(-1px);
  /* it goes down from hovering, but it's slightly above the default place */
  /* positioning is absolute kevin */
  box-shadow: 0 5px 10px rgba(0, 0, 0, .2);
    /* lessen the shadow so it looks like you clicked it */
}

/* https://www.w3schools.com/css/css_inline-block.asp */

/* Compared to display: inline, the major difference is that display: inline-block allows to set a width and height on the element. */

/* Also, with display: inline-block, the top and bottom margins/paddings are respected, but with display: inline they are not. */

/* Compared to display: block, the major difference is that display: inline-block does not add a line-break after the element, so the element can sit next to other elements. */

.btn-white {
  background-color: #fff;
  color: #777;
}

/* gets treated as the btn's child */
/* looks exactly like the element we have, but we put it in it */
.btn::after {
  /* must specify content and display */
  content: "";
  display: inline-block;
  height: 100%;
  width: 100%;
  border-radius: 100px;
  /* absolute positions need reference */
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  transition: all .4s;
}

.btn-white::after {
  background-color: #fff;
}

/* grow and fade out button */
.btn:hover::after {
  transform: scaleX(1.4) scaleY(1.6);
  opacity: 0;
    /* trick for fading something out */
}

.btn-animated {
  animation: moveInBottom .5s ease-out .75s;
  /* .75s is animation delay */
  animation-fill-mode: backwards;
    /* automatically apply 0% style as it starts */
}

@keyframes moveInBottom {
  /* start point */
  0% {
    opacity: 0;
    transform: translateY(30px);
  }

  80% {
    transform: translateY(-10px);
  }

  100% {
    opacity: 1;
    transform: translate(0);
    /* it looks exactly the way it did; */
  }
}
