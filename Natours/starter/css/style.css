@keyframes moveInLeft {
  /* start point */
  0% {
    opacity: 0;
    transform: translateX(-10rem); }
  80% {
    transform: translateX(1rem); }
  100% {
    opacity: 1;
    transform: translate(0);
    /* it looks exactly the way it did; */ } }

@keyframes moveInRight {
  /* start point */
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem); }
  100% {
    opacity: 1;
    transform: translate(0);
    /* it looks exactly the way it did; */ } }

@keyframes moveInBottom {
  /* start point */
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  80% {
    transform: translateY(-1rem); }
  100% {
    opacity: 1;
    transform: translate(0);
    /* it looks exactly the way it did; */ } }

/* universal selector */
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  /* manually add in borders and padding this way */
  box-sizing: inherit;
  /* inherits from body?? */ }

/* root size gets declared here */
html {
  /* default 16px in most browsers */
  /* font-size: 10px; */
  /* set to 10 b/c it's easy to calculate rem */
  /* 1 rem is 10px now */
  font-size: 62.5%;
  /* never mind, setting font-size to 10px very bad practice */
  /* think of people that zoom in... */
  /* default is 16px; 62.5% of 16px is 10px; */
  /* we can still keep rem now */
  /* rem will still be in increments of 10px */
  /* rem not supported in internet explore below 9 */ }

body {
  box-sizing: border-box;
  /* by default box-sizing width and height only considers content */
  /* setting to border-box, width and height include padding */ }

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  /* font-size: 16px; */
  line-height: 1.7;
  /* line-height double space triple space 1.5 space ms word */
  color: #777;
  padding: 3rem; }

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  backface-visibility: hidden;
  /* at end of animation, it jitters up to the top ever so slightly */
  /* this is the fix for that... */
  margin-bottom: 6rem; }
  .heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out;
    /* animation-delay: 3s; */
    /* animation-iteration-count: 3; */ }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    /* Lato loaded 100,300,400,700,900 via google fonts */
    letter-spacing: 1.75rem;
    animation: moveInRight 1s ease-out;
    /* shorthand of the trio above */ }

/* block-level elements: occupy entire width, they create line breaks before and after */
/* span is inline by default, so we have to explicitly state that they will be displayed as blocks */
/* to break up the title and the sub heading as two lines */
.btn {
  /* the link pseudoclass */
  /* https://www.w3schools.com/css/css_inline-block.asp */
  /* Compared to display: inline, the major difference is that display: inline-block allows to set a width and height on the element. */
  /* Also, with display: inline-block, the top and bottom margins/paddings are respected, but with display: inline they are not. */
  /* Compared to display: block, the major difference is that display: inline-block does not add a line-break after the element, so the element can sit next to other elements. */
  /* gets treated as the btn's child */
  /* looks exactly like the element we have, but we put it in it */ }
  .btn:link, .btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    display: inline-block;
    /* https://www.w3schools.com/css/css_inline-block.asp */
    /* inline-blocks respect padding specifications as opposed to inline*/
    border-radius: 10rem;
    transition: all .2s;
    /* good for color change too */
    position: relative;
    /* for the .btn:after point of reference */
    font-size: 1.6rem;
    /* have to specify font size now since it inherits from root now */
    /* unspecified it'd be 10px */ }
  .btn:hover {
    transform: translateY(-0.3rem);
    /* down is up in css */
    /* this has button kick up */
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
    /* x, y, blur, color */
    /* a subtle black shadow */
    /* grow and fade out button */ }
    .btn:hover:hover::after {
      transform: scaleX(1.4) scaleY(1.6);
      opacity: 0;
      /* trick for fading something out */ }
  .btn:active {
    transform: translateY(-0.1rem);
    /* it goes down from hovering, but it's slightly above the default place */
    /* positioning is absolute kevin */
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2);
    /* lessen the shadow so it looks like you clicked it */ }
  .btn--white {
    background-color: #fff;
    color: #777; }
    .btn--white::after {
      background-color: #fff; }
  .btn::after {
    /* must specify content and display */
    content: "";
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 100px;
    /* absolute positions need reference */
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    transition: all .4s; }
  .btn--animated {
    animation: moveInBottom .5s ease-out .75s;
    /* .75s is animation delay */
    animation-fill-mode: backwards;
    /* automatically apply 0% style as it starts */ }

.header {
  height: 95vh;
  /* 95 percent of viewport height at all time */
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg);
  background-size: cover;
  /* Scales the image as large as possible without stretching the image. If the proportions of the image differ from the element, it is cropped either vertically or horizontally so that no empty space remains. */
  background-position: top;
  /* what stays the same as the window gets resized; top;bottom;center; */
  clip-path: polygon(0 0, 100% 0, 100% 75%, 0 100%);
  /* the trapezoid effect clockwise from top left */
  /* https://bennettfeely.com/clippy/ */
  position: relative;
  /* not quite sure why this is relative */
  /* since logo box is absolutely positioned relative to the header... */
  /* https://www.w3schools.com/css/tryit.asp?filename=trycss_position_absolute */
  /* to center the heading */ }
  .header__logo-box {
    position: absolute;
    /* the position is relative to the parent element */
    /* in this case the header class */
    /* so set its parent class to be in relative position*/
    top: 4rem;
    left: 4rem; }
  .header__logo {
    height: 3.5rem; }
  .header__text-box {
    position: absolute;
    /* again, absolute to the parent, and make sure parent is positioned relatively */
    top: 40%;
    /* 40 percent of parent element */
    /* 40% since the bottom is cropped */
    left: 50%;
    /* 50 percent of parent element */
    transform: translate(-50%, -50%);
    /* translates half of its width to the left, and to the right; */
    /* moves origin of the translation point to the center of the content as opposed to the top left corner */
    text-align: center;
    /* the button which is a link is just a span element... */
    /* span elements are technically text, */
    /* so to center the button, we just set the text-align to center */
    /* epiphany: h1 is totally not a span element, so we had to do top left percentages */ }

.row {
  max-width: 114rem;
  background-color: #eee;
  margin: 0 auto; }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
  .row::after {
    content: "";
    display: table;
    clear: both; }
  .row [class^="col-"] {
    background-color: orangered;
    float: left; }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 6rem; }
  .row .col-1-of-2 {
    width: calc((100% - 6rem) / 2); }
  .row .col-1-of-3 {
    width: calc((100% - 2 * 6rem) / 3); }
  .row .col-2-of-3 {
    width: calc(2 * ((100% - 2 * 6rem) / 3) + 6rem); }
  .row .col-1-of-4 {
    width: calc((100% - 3 * 6rem) / 4); }
  .row .col-2-of-4 {
    width: calc(2* ((100% - 3 * 6rem) / 4) + 6rem); }
  .row .col-3-of-4 {
    width: calc(3* ((100% - 3 * 6rem) / 4) + 2 * 6rem); }
